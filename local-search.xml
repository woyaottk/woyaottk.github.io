<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySring</title>
    <link href="/2022/07/04/MySpring/"/>
    <url>/2022/07/04/MySpring/</url>
    
    <content type="html"><![CDATA[<h1 id="1-注解类"><a href="#1-注解类" class="headerlink" title="1. 注解类"></a>1. 注解类</h1><p>Spring有三个常用注解分别是@Component、@ComponentScan、@Autowired</p><h2 id="1-1-Component"><a href="#1-1-Component" class="headerlink" title="1.1 @Component"></a>1.1 @Component</h2><p>@Component注解的作用是给要注入SpringIOC容器的类做标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Component &#123;<br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-ComponentScan"><a href="#1-2-ComponentScan" class="headerlink" title="1.2 @ComponentScan"></a>1.2 @ComponentScan</h2><p>@ComponentScan用来扫描指定路径下的类是否包含@Component注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ComponentScan &#123;<br>    String <span class="hljs-title function_">basePackages</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-Autowired"><a href="#1-3-Autowired" class="headerlink" title="1.3 @Autowired"></a>1.3 @Autowired</h2><p>@Autowired用来自动给某个属性注入被Component标记的类对象</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Target</span>(ElementType.FIELD)<br><span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)<br>public <span class="hljs-variable">@interface</span> Autowired &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-ApplicationContext"><a href="#2-ApplicationContext" class="headerlink" title="2. ApplicationContext"></a>2. ApplicationContext</h1><p>ApplicationContext因此也称之为Spring上下文。Spring容器负责管理Bean与Bean之间的依赖关系。</p><p>这个类需要做两件事情</p><ol><li>扫描配置信息中指定包下的类</li><li>实例化扫描到的类</li></ol><p><img src="/../../../%E7%AC%94%E8%AE%B0/ssm/MySpring.assets/image-20220701155157100.png" alt="image-20220701155157100"></p><h2 id="2-1-扫描类信息"><a href="#2-1-扫描类信息" class="headerlink" title="2.1 扫描类信息"></a>2.1 扫描类信息</h2><p>首先我们先做扫描类信息的功能，扫描类信息需要做两件事</p><ol><li>解析配置类获取到我指定的扫描包路径</li><li>使用获取到的扫描包路径进行文件遍历操作如果是目录则递归进行2否则进入3</li><li>被Component注解标识的类进行注册</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.扫描配置信息中指定包下的类</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scan</span><span class="hljs-params">(Class&lt;?&gt; configClass)</span> &#123;<br>    <span class="hljs-comment">// 解析配置类，获取到扫描包路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">basePackages</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getBasePackages(configClass);<br>    <span class="hljs-comment">// 使用扫描包路径进行文件遍历操作</span><br>    <span class="hljs-built_in">this</span>.doScan(basePackages);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-1-解析配置类，获取到扫描包路径"><a href="#2-1-1-解析配置类，获取到扫描包路径" class="headerlink" title="2.1.1 解析配置类，获取到扫描包路径"></a>2.1.1 解析配置类，获取到扫描包路径</h3><p>这个就是简单获取配置类中@ComponentScan注解的basePackages值</p><p>使用反射机制解析注解的步骤：</p><ol><li>获取被注解注释的类对象<br><code>Class&lt;Annotation&gt; annotationClass = Annotation.class;</code></li><li>获取这个类对象中的注解对象<br><code>MyAnnotation myAnnotation = annotationClass.getAnnotation(MyAnnotation.class);</code></li><li>调用注解对象的方法获取属性值<br><code>myAnnotation.num()</code></li></ol><p>第一步不用做因为注解类是作为参数直接传入的，所以我们只需要做后两步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 解析配置类，获取到扫描包路径</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getBasePackages</span><span class="hljs-params">(Class&lt;?&gt; configClass)</span> &#123;<br>    <span class="hljs-comment">// 获取这个类对象中的注解对象</span><br>    <span class="hljs-type">ComponentScan</span> <span class="hljs-variable">componentScan</span> <span class="hljs-operator">=</span> configClass.getAnnotation(ComponentScan.class);<br>    <span class="hljs-comment">// 调用注解对象的方法获取属性值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">basePackages</span> <span class="hljs-operator">=</span> componentScan.basePackages();<br>    <span class="hljs-keyword">return</span> basePackages;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-2-使用扫描包路径进行文件遍历操作"><a href="#2-1-2-使用扫描包路径进行文件遍历操作" class="headerlink" title="2.1.2 使用扫描包路径进行文件遍历操作"></a>2.1.2 使用扫描包路径进行文件遍历操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用扫描包路径进行文件遍历操作</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doScan</span><span class="hljs-params">(String basePackages)</span> &#123;<br>    <span class="hljs-comment">// 将.转化为/</span><br>    String[] split = basePackages.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;/src/&quot;</span> +  split[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; split.length; i++) &#123;<br>        filePath += <span class="hljs-string">&quot;/&quot;</span> + split[i];<br>    &#125;<br><br><br>    <span class="hljs-comment">// 获取资源信息</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>    <span class="hljs-keyword">for</span> (File file : dir.listFiles()) &#123;<br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>            <span class="hljs-comment">// 递归扫描</span><br>            doScan(basePackages + <span class="hljs-string">&quot;.&quot;</span> + file.getName());<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// com.my.spring.example + . + Boy.class -&gt; com.my.spring.example.Boy</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> basePackages + <span class="hljs-string">&quot;.&quot;</span> + file.getName().replace(<span class="hljs-string">&quot;.java&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-comment">// 将class存放到classMap中</span><br>            <span class="hljs-built_in">this</span>.registerClass(className);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-3-注册含有Component注解的类"><a href="#2-1-3-注册含有Component注解的类" class="headerlink" title="2.1.3 注册含有Component注解的类"></a>2.1.3 注册含有Component注解的类</h3><p>我们需要注册也就是存储含有Component的类，这里为了保证线程安全采用了ConcurrentHashMap</p><p>步骤：</p><ol><li>使用类加载器通过类名加载类信息</li><li>获取这个类的Component注解</li><li>如果存在Component注解则将其放入类信息池中</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 如果该类含有Component注解那么就将其加入到classMap中</span><br><span class="hljs-keyword">private</span> void register<span class="hljs-constructor">Class(String <span class="hljs-params">className</span>)</span>&#123;<br>    <span class="hljs-comment">// 使用类加载器通过类名加载类信息</span><br>    ClassLoader classLoader = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span>get<span class="hljs-constructor">SystemClassLoader()</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Class&lt;?&gt; clazz = classLoader.load<span class="hljs-constructor">Class(<span class="hljs-params">className</span>)</span>;<br>        <span class="hljs-comment">// 获取这个类的Component注解</span><br>        Component component = clazz.get<span class="hljs-constructor">Annotation(Component.<span class="hljs-params">class</span>)</span>;<br>        <span class="hljs-comment">// 如果存在Component注解则将其放入类信息池中</span><br>        <span class="hljs-keyword">if</span> (component != null) &#123;<br>            classPool.put(className,clazz);<br>        &#125;<br>    &#125; catch (ClassNotFoundException e) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;类加载失败&quot;</span>);<br>        e.print<span class="hljs-constructor">StackTrace()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-实例化扫描到的类"><a href="#2-2-实例化扫描到的类" class="headerlink" title="2.2 实例化扫描到的类"></a>2.2 实例化扫描到的类</h2><p>首先我们要用一个ConcurrentHashMap来存储bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义一个线程安全的类对象池</span><br><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; beanPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><blockquote><p>流程图：</p></blockquote><p><img src="/../../../%E7%AC%94%E8%AE%B0/ssm/MySpring.assets/image-20220701175424802.png" alt="image-20220701175424802"></p><h3 id="2-2-1-实例化扫描到的类"><a href="#2-2-1-实例化扫描到的类" class="headerlink" title="2.2.1 实例化扫描到的类"></a>2.2.1 实例化扫描到的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2. 实例化扫描到的类</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">instantiateBean</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 将classPool中的所有值都实例化，并获取</span><br>    <span class="hljs-keyword">for</span> (Class&lt;?&gt; clazz : classPool.values()) &#123;<br>        getBean(clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-2-获取bean对象"><a href="#2-2-2-获取bean对象" class="headerlink" title="2.2.2 获取bean对象"></a>2.2.2 获取bean对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>    <span class="hljs-comment">// 先从缓存中获取</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> beanPool.get(clazz.getName());<br>    <span class="hljs-keyword">if</span> (bean != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> bean;<br>    <span class="hljs-comment">// 如果没有则创建</span><br>    <span class="hljs-keyword">return</span> createBean(clazz);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-3-创建bean对象"><a href="#2-2-3-创建bean对象" class="headerlink" title="2.2.3 创建bean对象"></a>2.2.3 创建bean对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建bean对象</span><br><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">createBean</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>    <span class="hljs-comment">// 1. 实例化bean</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.newInstance(clazz);<br>    <span class="hljs-comment">// 2. 填充字段，将含有Autowired注解的字段注入bean对象</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">this</span>.populateBean(bean, clazz);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-comment">// 3. 实例好并且注入完的bean放入beanPool中</span><br>    beanPool.put(clazz.getName(),bean);<br>    <span class="hljs-keyword">return</span> bean;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-4-实例化bean"><a href="#2-2-4-实例化bean" class="headerlink" title="2.2.4 实例化bean"></a>2.2.4 实例化bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">newInstance</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        bean = clazz.getDeclaredConstructor().newInstance();<br>    &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>        System.out.println(<span class="hljs-string">&quot;bean实例化失败&quot;</span>);<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>        System.out.println(<span class="hljs-string">&quot;bean实例化失败&quot;</span>);<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>        System.out.println(<span class="hljs-string">&quot;bean实例化失败&quot;</span>);<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>        System.out.println(<span class="hljs-string">&quot;bean实例化失败&quot;</span>);<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> bean;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-5-填充字段，将含有Autowired注解的字段注入bean对象"><a href="#2-2-5-填充字段，将含有Autowired注解的字段注入bean对象" class="headerlink" title="2.2.5 填充字段，将含有Autowired注解的字段注入bean对象"></a>2.2.5 填充字段，将含有Autowired注解的字段注入bean对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 填充字段，将含有Autowired注解的字段注入bean对象</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">populateBean</span><span class="hljs-params">(Object bean, Class&lt;?&gt; clazz)</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>    <span class="hljs-comment">// 解析class信息，判断类中是否有需要进行依赖注入的字段</span><br>    Field[] fields = clazz.getDeclaredFields();<br>    <span class="hljs-comment">// 遍历每一个属性</span><br>    <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>        <span class="hljs-comment">// 获取属性的Autowired注解</span><br>        <span class="hljs-type">Autowired</span> <span class="hljs-variable">autowired</span> <span class="hljs-operator">=</span> field.getAnnotation(Autowired.class);<br>        <span class="hljs-comment">// 如果有Autowired这个注解</span><br>        <span class="hljs-keyword">if</span> (autowired != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 解析这个属性对应的类</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> resolveBean(field.getType());<br>            <span class="hljs-comment">// 爆破，因为属性可能是private</span><br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-comment">// 将value值保存到bean对象的属性中</span><br>            field.set(bean,value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-6-解析bean用来实现声明接口时注入其子类对象"><a href="#2-2-6-解析bean用来实现声明接口时注入其子类对象" class="headerlink" title="2.2.6 解析bean用来实现声明接口时注入其子类对象"></a>2.2.6 解析bean用来实现声明接口时注入其子类对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 解析bean用来实现声明接口时注入其子类对象</span><br><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">resolveBean</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span>&#123;<br>    <span class="hljs-comment">// 判断clazz是不是一个接口</span><br>    <span class="hljs-keyword">if</span> (clazz.isInterface()) &#123;<br>        <span class="hljs-comment">// 遍历classPool</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String,Class&lt;?&gt;&gt; entry : classPool.entrySet()) &#123;<br>            <span class="hljs-comment">// 如果clazz对应的类是entry对应的类的父类或接口</span><br>            <span class="hljs-keyword">if</span> (clazz.isAssignableFrom(entry.getValue())) &#123;<br>                <span class="hljs-keyword">return</span> getBean(entry.getValue());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;找不到可以注入的bean&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> getBean(clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-组合"><a href="#2-3-组合" class="headerlink" title="2.3 组合"></a>2.3 组合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationContext</span> &#123;<br><br>    <span class="hljs-comment">// 定义一个线程安全的类信息池</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; classPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">// 定义一个线程安全的类对象池</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; beanPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ApplicationContext</span><span class="hljs-params">(Class&lt;?&gt; configClass)</span> &#123;<br>        <span class="hljs-comment">// 1.扫描配置信息中指定包下的类</span><br>        <span class="hljs-built_in">this</span>.scan(configClass);<br>        <span class="hljs-comment">// 2.实例化扫描到的类</span><br>        <span class="hljs-built_in">this</span>.instantiateBean();<br>    &#125;<br><br><br><br>    <span class="hljs-comment">// 1.扫描配置信息中指定包下的类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scan</span><span class="hljs-params">(Class&lt;?&gt; configClass)</span> &#123;<br>        <span class="hljs-comment">// 解析配置类，获取到扫描包路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">basePackages</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getBasePackages(configClass);<br>        <span class="hljs-comment">// 使用扫描包路径进行文件遍历操作</span><br>        <span class="hljs-built_in">this</span>.doScan(basePackages);<br>    &#125;<br><br>    <span class="hljs-comment">// 解析配置类，获取到扫描包路径</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getBasePackages</span><span class="hljs-params">(Class&lt;?&gt; configClass)</span> &#123;<br>        <span class="hljs-comment">// 获取这个类对象中的注解对象</span><br>        <span class="hljs-type">ComponentScan</span> <span class="hljs-variable">componentScan</span> <span class="hljs-operator">=</span> configClass.getAnnotation(ComponentScan.class);<br>        <span class="hljs-comment">// 调用注解对象的方法获取属性值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">basePackages</span> <span class="hljs-operator">=</span> componentScan.basePackages();<br>        <span class="hljs-keyword">return</span> basePackages;<br>    &#125;<br><br>    <span class="hljs-comment">// 使用扫描包路径进行文件遍历操作</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doScan</span><span class="hljs-params">(String basePackages)</span> &#123;<br>        <span class="hljs-comment">// 将.转化为/</span><br>        String[] split = basePackages.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;/src/&quot;</span> +  split[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; split.length; i++) &#123;<br>            filePath += <span class="hljs-string">&quot;/&quot;</span> + split[i];<br>        &#125;<br><br><br>        <span class="hljs-comment">// 获取资源信息</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">for</span> (File file : dir.listFiles()) &#123;<br>            <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>                <span class="hljs-comment">// 递归扫描</span><br>                doScan(basePackages + <span class="hljs-string">&quot;.&quot;</span> + file.getName());<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// com.my.spring.example + . + Boy.class -&gt; com.my.spring.example.Boy</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> basePackages + <span class="hljs-string">&quot;.&quot;</span> + file.getName().replace(<span class="hljs-string">&quot;.java&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                <span class="hljs-comment">// 将class存放到classMap中</span><br>                <span class="hljs-built_in">this</span>.registerClass(className);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果该类含有Component注解那么就将其加入到classMap中</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerClass</span><span class="hljs-params">(String className)</span>&#123;<br>        <span class="hljs-comment">// 使用类加载器通过类名加载类信息</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; clazz = classLoader.loadClass(className);<br>            <span class="hljs-comment">// 获取这个类的Component注解</span><br>            <span class="hljs-type">Component</span> <span class="hljs-variable">component</span> <span class="hljs-operator">=</span> clazz.getAnnotation(Component.class);<br>            <span class="hljs-comment">// 如果存在Component注解则将其放入类信息池中</span><br>            <span class="hljs-keyword">if</span> (component != <span class="hljs-literal">null</span>) &#123;<br>                classPool.put(className,clazz);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;类加载失败&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 实例化扫描到的类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">instantiateBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 将classPool中的所有值都实例化，并获取</span><br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; clazz : classPool.values()) &#123;<br>            getBean(clazz);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取bean对象</span><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-comment">// 先从缓存中获取</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> beanPool.get(clazz.getName());<br>        <span class="hljs-keyword">if</span> (bean != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> bean;<br>        <span class="hljs-comment">// 如果没有则创建</span><br>        <span class="hljs-keyword">return</span> createBean(clazz);<br>    &#125;<br><br>    <span class="hljs-comment">// 创建bean对象</span><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">createBean</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-comment">// 1. 实例化bean</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.newInstance(clazz);<br>        <span class="hljs-comment">// 2. 填充字段，将含有Autowired注解的字段注入bean对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.populateBean(bean, clazz);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// 3. 实例好并且注入完的bean放入beanPool中</span><br>        beanPool.put(clazz.getName(),bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-comment">// 实例化bean</span><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">newInstance</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bean = clazz.getDeclaredConstructor().newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;bean实例化失败&quot;</span>);<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;bean实例化失败&quot;</span>);<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;bean实例化失败&quot;</span>);<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;bean实例化失败&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-comment">// 填充字段，将含有Autowired注解的字段注入bean对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">populateBean</span><span class="hljs-params">(Object bean, Class&lt;?&gt; clazz)</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>        <span class="hljs-comment">// 解析class信息，判断类中是否有需要进行依赖注入的字段</span><br>        Field[] fields = clazz.getDeclaredFields();<br>        <span class="hljs-comment">// 遍历每一个属性</span><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            <span class="hljs-comment">// 获取属性的Autowired注解</span><br>            <span class="hljs-type">Autowired</span> <span class="hljs-variable">autowired</span> <span class="hljs-operator">=</span> field.getAnnotation(Autowired.class);<br>            <span class="hljs-comment">// 如果有Autowired这个注解</span><br>            <span class="hljs-keyword">if</span> (autowired != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 解析这个属性对应的类</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> resolveBean(field.getType());<br>                <span class="hljs-comment">// 爆破，因为属性可能是private</span><br>                field.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">// 将value值保存到bean对象的属性中</span><br>                field.set(bean,value);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 解析bean用来实现声明接口时注入其子类对象</span><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">resolveBean</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span>&#123;<br>        <span class="hljs-comment">// 判断clazz是不是一个接口</span><br>        <span class="hljs-keyword">if</span> (clazz.isInterface()) &#123;<br>            <span class="hljs-comment">// 遍历classPool</span><br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;String,Class&lt;?&gt;&gt; entry : classPool.entrySet()) &#123;<br>                <span class="hljs-comment">// 如果clazz对应的类是entry对应的类的父类或接口</span><br>                <span class="hljs-keyword">if</span> (clazz.isAssignableFrom(entry.getValue())) &#123;<br>                    <span class="hljs-keyword">return</span> getBean(entry.getValue());<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;找不到可以注入的bean&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> getBean(clazz);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-包结构以及测试结果"><a href="#3-包结构以及测试结果" class="headerlink" title="3. 包结构以及测试结果"></a>3. 包结构以及测试结果</h1><p><img src="/MySpring.assets/image-20220701175612955.png" alt="image-20220701175612955"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="/2022/07/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/2022/07/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="我的第一篇博客文章"><a href="#我的第一篇博客文章" class="headerlink" title="我的第一篇博客文章"></a>我的第一篇博客文章</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/07/02/hello-world/"/>
    <url>/2022/07/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
